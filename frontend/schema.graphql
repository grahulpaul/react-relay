type Query {
  backEnd: Area
  frontEnd: Area

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Area implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  skills(after: String, first: Int, before: String, last: Int): SkillConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type SkillConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SkillEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type SkillEdge {
  """The item at the end of the edge"""
  node: Skill

  """A cursor for use in pagination"""
  cursor: String!
}

type Skill implements Node {
  """The ID of an object"""
  id: ID!
  name: String
}

type Mutation {
  introduceSkill(input: IntroduceSkillInput!): IntroduceSkillPayload
}

type IntroduceSkillPayload {
  skill: Skill
  area: Area
  clientMutationId: String
}

input IntroduceSkillInput {
  skillName: String!
  areaId: ID!
  clientMutationId: String
}
